def detect_faces_in_image(file_stream):
  
    video_capture = cv2.VideoCapture(0)
    img = face_recognition.load_image_file(file_stream)
    faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    unknown_face_encodings = face_recognition.face_encodings(img)
    with open('dataset_faces.dat', 'rb') as f:
	    all_face_encodings = pickle.load(f)
    face_names = list(all_face_encodings.keys())
    face_encodings1 = np.array(list(all_face_encodings.values()))
    print(face_encodings1)
    face_found = False
    is_yours = False
    is_obama = False
    is_biden = False
    
    while True:
    # Grab a single frame of video
       ret, frame = video_capture.read()
       gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
       faces = faceCascade.detectMultiScale(
          gray,
          scaleFactor=1.1,
          minNeighbors=5,
          minSize=(30, 30)
         )
    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
       #rgb_frame = frame[:, :, ::-1]

    # Find all the faces and face enqcodings in the frame of video
       #face_locations = face_recognition.face_locations(rgb_frame)
       #face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
       for (top, right, bottom, left) in faces:
    # Loop through each face in this frame of video
       #for (x, y, w, h) in faces:
           #face_found = True
           matches = face_recognition.compare_faces(face_encodings1, unknown_face_encodings)
           name = "Unknown"
        # If a match was found in known_face_encodings, just use the first one.
           if True in matches:
               first_match_index = matches.index(True)
               name = face_names[first_match_index]
           
        # Draw a box around the face
           cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

        # Draw a label with a name below the face
           cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
           font = cv2.FONT_HERSHEY_DUPLEX
           cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
    # Display the resulting image
       cv2.imshow('Video', frame)
       cv2.imwrite("/home/manisa/Desktop/data/image1.jpg",frame)       
    # Hit 'q' on the keyboard to quit!
       if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release handle to the webcam
    video_capture.release()
    cv2.destroyAllWindows()
# Load a sample picture and learn how to recognize it.
    
    return redirect(url_for('home'))  
